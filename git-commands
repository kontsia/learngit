Author: Kostas Tsiagas

------------ Section 1: BASIC GIT FLOW ------------
git status
git add .
git diff --cached
git commit -m "message"
git pull --> before start working on local repo ALWAYS get a fresh image of the remote repository
git push origin main --> upload the changes from local repository (main branch) to remote repository (main branch)
git log
git log --oneline
git log -1
git show commit_id
git show --name-status




------------ Section 2: BRANCHING. WORKING WITH LOCAL AND REMOTE BRANCHES ------------
A useful url for how commits are looked like in git time-line: http://onlywei.github.io/explain-git-with-d3/#zen

git branch feature1 --> creates a new branch with name feature1 BUT YOU DONT SWITCH TO IT!!!
git checkout feature1 --> switch to branch named "feature1"

git checkout -b feature2 --> creates a new branch named "feature2" and SWITCH to it at the same time !!!!

origin/master:
Origin and Master are two different terminologies used when working and managing the git projects. Origin is the name used for the remote repository. Master is the name of the branch

origin/HEAD:
origin/HEAD is the active branch on the remote repo.

HEAD -> master:
Means that the HEAD is pointing to master branch

HEAD -> feature1:
Means that the HEAD is pointing to branch named "feature1"




------------ Section 3: INTRO TO MERGING ------------
MERGE: In order to correctly merge within command-line, we need to be on the branch we want to merge into!

git merge repo1 --> means that: If you are in a branch named "branch0 you will merge INTO IT, the changes of branch1

Example1: You want to merge the commits of branch "feature1" to main branch
		git checkout main
		git merge feature1  --> every commit of feature1 MERGES to main branch (because we are in main branch when we executed merge command)

Example2: You are in "feature1" branch and you want to merge branch "feature2"
		git checkout feature1
		git merge feature2

ATTENTION: 	Let's say that we are on branch "feature1" and we have merged "feature2" into "feature1".
		If we make a cnage/commit on branch "feature1" and we want to switch to the (merged) "feature2, every change we did on the "feature1 (the previous branch), will be lost...!!!!!


ADVICE:		Once we're done merging, we should delete the "merged" branch !!!




------------ Section 4: BRANCHING AND MERGING WITH PULL REQUESTS ------------
Scenario: You want to create a new local branch, to maka a change, andn then to pull this new branch to github
git checkout -b demobranchforremote
vi demo-file-for-upload
git add demo-file-for-upload 
git commit -m "create a new file for the new branch"
git push origin demobranchforremote

	➜  /home/ktsiagas/GIT/learngit git:(demobranchforremote) git push origin demobranchforremote
	Enumerating objects: 4, done.
	Counting objects: 100% (4/4), done.
	Delta compression using up to 8 threads
	Compressing objects: 100% (2/2), done.
	Writing objects: 100% (3/3), 402 bytes | 402.00 KiB/s, done.
	Total 3 (delta 0), reused 0 (delta 0)
	remote:
	remote: Create a pull request for 'demobranchforremote' on GitHub by visiting:
	remote:      https://github.com/kontsia/learngit/pull/new/demobranchforremote
	remote:
	To github.com:kontsia/learngit.git
	 * [new branch]      demobranchforremote -> demobranchforremote
	➜  /home/ktsiagas/GIT/learngit git:(demobranchforremote)




------------ Section 5 ------------



























This is the last line of the file!
